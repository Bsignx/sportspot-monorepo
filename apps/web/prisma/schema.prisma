// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?    @db.VarChar(255)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Spots         Spot[]
  Ratings       Rating[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Spot {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String?
  address     String?
  state       String?
  city        String?
  country     String?
  latitude    Float?
  longitude   Float?
  images      String[]   @default([])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tagName     String
  tag         Tag        @relation(fields: [tagName], references: [name], onDelete: Cascade)
  ratings     Rating[]
  Favorite    Favorite[]
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  Spots     Spot[]
}

model Rating {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String?
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
